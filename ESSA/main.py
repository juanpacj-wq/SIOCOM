"""
M√≥dulo principal para extraer datos de factura ESSA PDF y exportar a Excel
"""

import sys
import os
from pathlib import Path
from pdf_reader import PDFReader
from data_extractor import DataExtractor
from excel_writer import ExcelWriter


def main():
    """Funci√≥n principal del programa"""
    
    # Configuraci√≥n
    pdf_path = "119325 - SDL ESSA.pdf"  # Cambiar por la ruta de tu PDF
    output_excel = "factura_essa_datos.xlsx"
    
    print("=" * 60)
    print("EXTRACTOR DE DATOS DE FACTURA ESSA")
    print("=" * 60)
    
    # Verificar que el archivo existe
    if not os.path.exists(pdf_path):
        print(f"‚ùå Error: No se encontr√≥ el archivo {pdf_path}")
        print("Por favor, aseg√∫rate de que el archivo PDF est√© en la carpeta correcta.")
        sys.exit(1)
    
    try:
        # Paso 1: Leer el PDF
        print("\nüìÑ Leyendo archivo PDF...")
        pdf_reader = PDFReader(pdf_path)
        texto_completo = pdf_reader.extraer_texto()
        
        if not texto_completo:
            print("‚ùå Error: No se pudo extraer texto del PDF")
            sys.exit(1)
        
        print(f"‚úÖ Texto extra√≠do exitosamente ({len(texto_completo)} caracteres)")
        
        # Paso 2: Extraer datos con regex
        print("\nüîç Extrayendo datos con expresiones regulares...")
        extractor = DataExtractor(texto_completo)
        datos_extraidos = extractor.extraer_todos_los_datos()
        
        # Mostrar resumen de datos extra√≠dos
        print(f"\nüìä Resumen de datos extra√≠dos:")
        for categoria, valores in datos_extraidos.items():
            if valores:
                if isinstance(valores, dict):
                    print(f"  ‚Ä¢ {categoria}: {len(valores)} campos")
                elif isinstance(valores, list):
                    print(f"  ‚Ä¢ {categoria}: {len(valores)} items")
                else:
                    print(f"  ‚Ä¢ {categoria}: Extra√≠do")
        
        # Paso 3: Guardar en Excel
        print(f"\nüíæ Guardando datos en Excel: {output_excel}")
        writer = ExcelWriter(output_excel)
        writer.escribir_datos(datos_extraidos)
        
        print(f"‚úÖ Archivo Excel creado exitosamente: {output_excel}")
        
        # Mostrar estad√≠sticas finales
        print("\n" + "=" * 60)
        print("PROCESO COMPLETADO EXITOSAMENTE")
        print("=" * 60)
        print(f"üìÅ Archivo de entrada: {pdf_path}")
        print(f"üìä Archivo de salida: {output_excel}")
        
        # Mostrar algunos datos clave extra√≠dos
        if 'informacion_general' in datos_extraidos:
            info = datos_extraidos['informacion_general']
            if 'numero_factura' in info:
                print(f"üìÑ Factura: {info['numero_factura']}")
            if 'total_pagar' in info:
                print(f"üí∞ Total: ${info['total_pagar']:,.0f}")
        
    except FileNotFoundError as e:
        print(f"‚ùå Error: Archivo no encontrado - {e}")
        sys.exit(1)
    except PermissionError as e:
        print(f"‚ùå Error: Sin permisos para acceder al archivo - {e}")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå Error inesperado: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


def validar_dependencias():
    """Validar que las dependencias necesarias est√©n instaladas"""
    dependencias = {
        'PyPDF2': 'PyPDF2',
        'openpyxl': 'openpyxl',
        'pandas': 'pandas'
    }
    
    faltantes = []
    for modulo, nombre_pip in dependencias.items():
        try:
            __import__(modulo)
        except ImportError:
            faltantes.append(nombre_pip)
    
    if faltantes:
        print("‚ùå Faltan las siguientes dependencias:")
        for dep in faltantes:
            print(f"  ‚Ä¢ {dep}")
        print("\nPara instalarlas, ejecuta:")
        print(f"pip install {' '.join(faltantes)}")
        sys.exit(1)


if __name__ == "__main__":
    # Validar dependencias antes de ejecutar
    validar_dependencias()
    
    # Ejecutar programa principal
    main()